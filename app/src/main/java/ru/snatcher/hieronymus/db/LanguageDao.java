package ru.snatcher.hieronymus.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LANGUAGE".
 */
public class LanguageDao extends AbstractDao<Language, Long> {

	public static final String TABLENAME = "LANGUAGE";

	public LanguageDao(DaoConfig config) {
		super(config);
	}


	public LanguageDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"LANGUAGE\" (" + //
				"\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"\"F_LANG_KEY\" TEXT UNIQUE ," + // 1: fLangKey
				"\"F_LANG_VALUE\" TEXT UNIQUE );"); // 2: fLangValue
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LANGUAGE\"";
		db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Language entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String fLangKey = entity.getLangKey();
		if (fLangKey != null) {
			stmt.bindString(2, fLangKey);
		}

		String fLangValue = entity.getLangValue();
		if (fLangValue != null) {
			stmt.bindString(3, fLangValue);
		}
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Language entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String fLangKey = entity.getLangKey();
		if (fLangKey != null) {
			stmt.bindString(2, fLangKey);
		}

		String fLangValue = entity.getLangValue();
		if (fLangValue != null) {
			stmt.bindString(3, fLangValue);
		}
	}

	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset) ? null : cursor.getLong(offset);
	}

	@Override
	public Language readEntity(Cursor cursor, int offset) {
		return new Language( //
				cursor.isNull(offset) ? null : cursor.getLong(offset), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fLangKey
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // fLangValue
		);
	}

	@Override
	public void readEntity(Cursor cursor, Language entity, int offset) {
		entity.setId(cursor.isNull(offset) ? null : cursor.getLong(offset));
		entity.setLangKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
		entity.setLangValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
	}

	@Override
	protected final Long updateKeyAfterInsert(Language entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	@Override
	public Long getKey(Language entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	@Override
	public boolean hasKey(Language entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Properties of entity Language.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property FLangKey = new Property(1, String.class, "fLangKey", false, "F_LANG_KEY");
		public final static Property FLangValue = new Property(2, String.class, "fLangValue", false, "F_LANG_VALUE");
	}

}
